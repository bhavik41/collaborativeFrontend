import React, { useState, useEffect } from 'react';
import { FilePlus2, UserRound, Trash2, Plus, Loader2 } from 'lucide-react';
import axios from '../config/axios';
import { useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { RootState } from '../App/store';

interface Project {
    id: string;
    name: string;
    users: string[];
    version?: number;
    createdAt?: string;
}

const Home = () => {
    const { user } = useSelector((state: RootState) => state.auth);
    const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
    const [projectName, setProjectName] = useState<string>('');
    const [projects, setProjects] = useState<Project[] | null>(null);
    const [isLoading, setIsLoading] = useState<boolean>(true);
    const [deleteLoading, setDeleteLoading] = useState<string | null>(null);
    const [searchTerm, setSearchTerm] = useState<string>('');
    const navigate = useNavigate();

    const fetchProjects = () => {
        setIsLoading(true);
        axios.get<{ Projects: Project[] }>('/project/all')
            .then((res) => {
                setProjects(res.data.Projects);
                setIsLoading(false);
            })
            .catch((error) => {
                console.error("Failed to fetch projects:", error);
                setIsLoading(false);
            });
    };

    useEffect(() => {
        fetchProjects();
    }, []);

    const createProject = async (e: React.FormEvent) => {
        e.preventDefault();

        try {
            const res = await axios.post<{ newProject: Project }>('/project/create', {
                name: projectName,
            });

            setProjects((prevProjects) =>
                prevProjects ? [...prevProjects, res.data.newProject] : [res.data.newProject]
            );
            setProjectName('');
            setIsModalOpen(false);
        } catch (error) {
            console.error("Failed to create project:", error);
        }
    };

    const deleteProject = async (id: string, e: React.MouseEvent) => {
        e.stopPropagation();
        setDeleteLoading(id);

        try {
            await axios.delete(`/project/delete/${id}`);
            setProjects((prevProjects) =>
                prevProjects ? prevProjects.filter(project => project.id !== id) : null
            );
        } catch (error) {
            console.error("Failed to delete project:", error);
        } finally {
            setDeleteLoading(null);
        }
    };

    const filteredProjects = projects?.filter(project =>
        project.name.toLowerCase().includes(searchTerm.toLowerCase())
    );

    return (
        <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
            <main className="max-w-7xl mx-auto p-6">
                <div className="mb-8">
                    <h1 className="text-3xl font-bold text-slate-800">Project Dashboard</h1>
                    <p className="text-slate-500 mt-2">Manage and collaborate on your projects</p>
                </div>

                <div className="flex flex-wrap items-center justify-between gap-4 mb-6">
                    <div className="relative w-full sm:w-64">
                        <input
                            type="text"
                            placeholder="Search projects..."
                            className="w-full px-4 py-2 pl-10 rounded-lg border border-slate-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                        />
                        <svg className="absolute left-3 top-2.5 h-5 w-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </div>

                    <button
                        onClick={() => setIsModalOpen(true)}
                        className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg transition-all hover:bg-blue-700 shadow-sm hover:shadow-md"
                    >
                        <Plus size={18} />
                        Create New Project
                    </button>
                </div>

                {isLoading ? (
                    <div className="flex justify-center items-center h-64">
                        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
                    </div>
                ) : (
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                        {filteredProjects && filteredProjects.length > 0 ? (
                            filteredProjects.map((project) => (
                                <div
                                    key={project.id}
                                    onClick={() => navigate(`/project/${project.id}`, { state: { project } })}
                                    className="relative group bg-white rounded-xl shadow-sm hover:shadow-md transition-all duration-200 overflow-hidden cursor-pointer border border-slate-100"
                                >
                                    <div className="absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity">
                                        <button
                                            onClick={(e) => deleteProject(project.id, e)}
                                            className="p-2 bg-red-50 rounded-full hover:bg-red-100 transition-colors"
                                            disabled={deleteLoading === project.id}
                                        >
                                            {deleteLoading === project.id ? (
                                                <Loader2 size={18} className="text-red-500 animate-spin" />
                                            ) : (
                                                <Trash2 size={18} className="text-red-500" />
                                            )}
                                        </button>
                                    </div>

                                    <div className="h-2 bg-gradient-to-r from-blue-400 to-purple-500"></div>

                                    <div className="p-6">
                                        <h2 className="text-xl font-semibold text-slate-800 mb-3 truncate">{project.name}</h2>

                                        <div className="flex justify-between items-end">
                                            <div className="flex items-center gap-2">
                                                <div className="bg-blue-50 p-2 rounded-lg">
                                                    <UserRound size={16} className="text-blue-500" />
                                                </div>
                                                <div>
                                                    <p className="text-xs text-slate-500">Collaborators</p>
                                                    <p className="font-medium text-slate-700">{project.users?.length || 0}</p>
                                                </div>
                                            </div>

                                            <div>
                                                <p className="text-xs text-slate-400">
                                                    {project.version ? `v${project.version}` : 'v1.0'}
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            ))
                        ) : (
                            <div className="col-span-full flex flex-col items-center justify-center h-64 bg-white rounded-xl shadow-sm p-8 text-center">
                                <FilePlus2 size={48} className="text-slate-300 mb-4" />
                                <h3 className="text-xl font-medium text-slate-700 mb-2">No projects found</h3>
                                <p className="text-slate-500 mb-6">
                                    {searchTerm ? 'Try a different search term or create a new project' : 'Get started by creating your first project'}
                                </p>
                                <button
                                    onClick={() => setIsModalOpen(true)}
                                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                                >
                                    Create Project
                                </button>
                            </div>
                        )}
                    </div>
                )}

                {/* Modal */}
                {isModalOpen && (
                    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
                        <div
                            className="bg-white rounded-xl shadow-xl w-full max-w-md mx-4 overflow-hidden animate-fadeIn"
                            onClick={(e) => e.stopPropagation()}
                        >
                            <div className="h-2 bg-gradient-to-r from-blue-400 to-purple-500"></div>
                            <div className="p-6">
                                <h2 className="text-2xl font-bold text-slate-800 mb-6">Create New Project</h2>
                                <form onSubmit={createProject}>
                                    <div className="mb-6">
                                        <label className="block text-slate-700 text-sm font-medium mb-2" htmlFor="projectName">
                                            Project Name
                                        </label>
                                        <input
                                            type="text"
                                            id="projectName"
                                            value={projectName}
                                            onChange={(e) => setProjectName(e.target.value)}
                                            className="w-full px-4 py-3 rounded-lg border border-slate-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                            placeholder="Enter a descriptive name"
                                            required
                                        />
                                    </div>
                                    <div className="flex justify-end gap-3">
                                        <button
                                            type="button"
                                            className="px-4 py-2 rounded-lg text-slate-700 hover:bg-slate-100"
                                            onClick={() => setIsModalOpen(false)}
                                        >
                                            Cancel
                                        </button>
                                        <button
                                            type="submit"
                                            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 shadow-sm"
                                        >
                                            Create Project
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                )}
            </main>
        </div>
    );
};

export default Home;